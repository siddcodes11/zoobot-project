# -*- coding: utf-8 -*-
"""Zoobot_Finetune_PyTorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rKHcZqivEJ77EOdZwihrixK9iAYB-iNa
"""

import logging

logging.basicConfig(level=logging.INFO)

!git clone https://github.com/mwalmsley/zoobot.git # places the cloned repo into zoobot_dir

!pip install -e /content/zoobot[pytorch_colab]

# google colab needs this hack to make git-cloned packaged importable
# it's not needed locally
import os
import sys
zoobot_dir = '/content/zoobot'
os.chdir(zoobot_dir)
sys.path.append(zoobot_dir)
!git pull  # just to make sure we're up to date

"""## Download Pretrained Checkpoint"""

# make a directory to place the checkpoint
# this could be anywhere, but Zoobot has this folder already
checkpoint_dir = os.path.join(zoobot_dir, 'data/pretrained_models/pytorch')  # Can place your checkpoint anywhere, 

# if not os.path.isdir(checkpoint_dir):
#   os.makedirs(checkpoint_dir)

!wget --no-check-certificate 'https://dl.dropboxusercontent.com/s/7ixwo59imjfz4ay/effnetb0_greyscale_224px.ckpt?dl=0' -O $checkpoint_dir/checkpoint.ckpt

"""## Download Catalogs of Images and Labels

Each catalog should be a dataframe with columns of "id_str", "file_loc", and any labels.

Here I'm using galaxy-datasets to download some premade data - check it out for examples.
"""

# galaxy-datasets is a dependency of Zoobot.
# It has code handling downloading and loading data.
from galaxy_datasets import demo_rings

data_dir = os.path.join(zoobot_dir, 'data/demo_rings')

train_catalog, label_cols = demo_rings(root=data_dir, download=True, train=True)
test_catalog, _ = demo_rings(root=data_dir, download=True, train=False)

train_catalog.head()

label_cols

"""## Configure Finetuning"""

import pandas as pd

from zoobot.pytorch.training import finetune
from galaxy_datasets.pytorch.galaxy_datamodule import GalaxyDataModule

# TODO you can update these paths to suit own data
checkpoint_loc = os.path.join(zoobot_dir, 'data/pretrained_models/pytorch/checkpoint.ckpt')  # downloaded above
save_dir = os.path.join(zoobot_dir, 'results/pytorch/finetune/finetune_binary_classification')

label_col = 'ring'  # name of column in catalog with binary (0 or 1) labels for your classes
label_cols = [label_col]

datamodule = GalaxyDataModule(
  label_cols=label_cols,
  catalog=train_catalog,
  batch_size=32,
  resize_after_crop=224,  # the size of the images input to the model
  num_workers=2  # sets the parallelism for loading data. 2 works well on colab.
)

assert all([os.path.isfile(loc) for loc in train_catalog['file_loc']])

"""# Now the Actual Finetuning"""

model = finetune.FinetuneableZoobotClassifier(
  checkpoint_loc=checkpoint_loc,
  num_classes=2,
  n_layers=2  # only updating the head weights. Set 0 for only output layer. Set e.g. 1, 2 to finetune deeper. 
)
# don't worry about any "automatically upgraded" INFO message below

trainer = finetune.get_trainer(save_dir, accelerator='auto', devices='auto', max_epochs=10)
trainer.fit(model, datamodule)
# should reach about 80% accuracy, loss of about 0.4

# now we can load the best checkpoint and make predictions
best_checkpoint = trainer.checkpoint_callback.best_model_path
finetuned_model = finetune.FinetuneableZoobotClassifier.load_from_checkpoint(best_checkpoint)

from zoobot.pytorch.predictions import predict_on_catalog

predict_on_catalog.predict(
  test_catalog,
  finetuned_model,
  n_samples=1,
  label_cols=label_cols,
  save_loc=os.path.join(save_dir, 'finetuned_predictions.csv'),
  trainer_kwargs={'accelerator': 'gpu'},
  datamodule_kwargs={'num_workers': 2}
)

predictions = pd.read_csv(os.path.join(save_dir, 'finetuned_predictions.csv'))
predictions.head()

predictions = pd.merge(predictions, test_catalog[['id_str', 'file_loc', 'ring']])
predictions.head()

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

def show_rings(df):
  # little utility function to visualise galaxies and our ring labels/predictions

  fig, axes = plt.subplots(ncols=5, figsize=(16, 3))
  for n in range(5):
    galaxy = df.iloc[n]

    im = Image.open(galaxy['file_loc'])
    axes[n].imshow(im)

    correct = np.around(galaxy['ring_pred']) == galaxy['ring']
    if correct:
      color = 'g'
    else:
      color = 'r'
    axes[n].text(20, 50, 'Pred: {:.2f}'.format(galaxy['ring_pred']), color=color)
    axes[n].text(20, 90, 'Label: {}'.format(galaxy['ring']), color=color)

    axes[n].axis('off')

top_5_predictions = predictions.sort_values('ring_pred', ascending=False)
show_rings(top_5_predictions)
print(top_5_predictions['id_str'])

bottom_5_predictions = predictions.sort_values('ring_pred', ascending=True)
show_rings(bottom_5_predictions)

random_predictions = predictions.sample(5)
print(random_predictions['id_str'])
show_rings(random_predictions)

"""Pretty good given only a couple of hundred examples for each class.
